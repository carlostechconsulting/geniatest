@* <RadzenButton *@
@*     Click=@(v => Canceled.InvokeAsync(v)) *@
@*     Size="ButtonSize.Small" *@
@*     Text="@Trans["cancel"]" ButtonStyle="ButtonStyle.Light"/> *@

<RadzenButton
	Disabled="@Disabled"
	Variant="@Variant"
	Icon="@Icon"
	Size="Size"
	ButtonStyle="ButtonStyle"
	Click="() => Click.InvokeAsync()"
	MouseEnter="@(args => {if (!Disabled && !string.IsNullOrEmpty(ToolTipText)) ShowTooltip(args, ToolTipText);})"/>


@inject TooltipService TooltipService

@code {

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public string ToolTipText { get; set; }

	[Parameter]
	public string Icon { get; set; }

	[Parameter]
	public ButtonSize Size { get; set; } = ButtonSize.Medium;


	[Parameter]
	public Variant Variant { get; set; } = Variant.Filled;

	[Parameter]
	public ButtonStyle ButtonStyle { get; set; } = ButtonStyle.Primary;

	[Parameter]
	public EventCallback Click { get; set; }

	private static readonly TooltipOptions TooltipOptions = new()
	{
		Delay = 0,
		Position = TooltipPosition.Bottom,
		Duration = 2000,
		Style = "background-color: gray; font-size: 10pt"
	};

	void ShowTooltip(ElementReference elementReference, string text) => TooltipService
		.Open(
			elementReference,
			text,
			TooltipOptions);

}